# üöÄ Exerc√≠cio 1: Crie uma fun√ß√£o que receba dois n√∫meros e retorne o maior


def biggerNumber(num1, num2):
    if num1 > num2:
        return num1
    else:
        return num2


print(biggerNumber(6, 10))

# üöÄ Exerc√≠cio 2: Calcule a m√©dia aritm√©tica dos valores contidos em uma lista.


def media(list):
    result = 0
    for number in list:
        result += number
    med = result / len(list)
    return med


print(media([3, 4, 5]))

# Exerc√≠cio 3: Fa√ßa um programa que, dado um valor n qualquer,
# tal que n > 1, imprima na tela um quadrado feito de asteriscos de lado de
#  tamanho n. Por exemplo:


def asteriscos(number):
    for row in range(number):
        print(number * "*")


print(asteriscos(5))

# üöÄ Exerc√≠cio 4: Crie uma fun√ß√£o que receba uma lista de nomes e retorne o
# nome com a maior quantidade de caracteres


def bigger_name_at_list(list):
    bigger = ""
    for name in list:
        if len(name) > len(bigger):
            bigger = name
        else:
            bigger = bigger
    return bigger


print(
    bigger_name_at_list(
        ["Jos√©", "Lucas", "N√°dia", "Fernanda", "Cairo", "Joana"]
    )
)


def total_ink_to_buy_and_value_to_pay(footage):
    total_paint_for_tin = 18 * 3
    for number in range(1, 1000):
        if footage < total_paint_for_tin * number:
            return (number, number * 80)
        else:
            return (number + 1, (number + 1) * 80)


print(total_ink_to_buy_and_value_to_pay(54))
print(total_ink_to_buy_and_value_to_pay(55))
print(total_ink_to_buy_and_value_to_pay(200))

# Exerc√≠cio 6: Crie uma fun√ß√£o que receba os tr√™s lado de um tri√¢ngulo
# e informe qual o tipo de tri√¢ngulo formado ou "n√£o √© triangulo", caso n√£o
# seja poss√≠vel formar um tri√¢ngulo.


def which_triangle_is(side1, side2, side3):
    if side1 == side2 == side3:
        return "Tri√¢ngulo Equil√°tero"
    elif side1 == side2 or side1 == side3 or side2 == side3:
        return "Tri√¢ngulo Is√≥sceles"
    elif side1 + side2 > side3:
        return "Tri√¢ngulo Escaleno"
    else:
        return " N√£o √© Tri√¢ngulo"


print(which_triangle_is(3, 3, 3))
print(which_triangle_is(3, 3, 2))
print(which_triangle_is(3, 2, 4))
print(which_triangle_is(2, 1, 4))
